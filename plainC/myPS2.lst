   1               		.file	"myPS2.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	writePS2
  12               	writePS2:
  13               	.LFB6:
  14               		.file 1 "myPS2.c"
   1:myPS2.c       **** /*
   2:myPS2.c       ****    Biblioteca para dispositivos com protocolo PS/2
   3:myPS2.c       ****    Baseada na biblioteca Arduino 'PS2' da autoria de Chris J. Kiick
   4:myPS2.c       ****    Daniel Jose Viana - Abril 2021 - danjovic@hotmail.com
   5:myPS2.c       **** */
   6:myPS2.c       **** #include <avr/io.h>
   7:myPS2.c       **** #include <util/delay.h>
   8:myPS2.c       **** #include "myPS2.h"
   9:myPS2.c       **** 
  10:myPS2.c       **** // Hardware definition
  11:myPS2.c       **** #define DAT_DDR  DDRB
  12:myPS2.c       **** #define DAT_PIN  PINB
  13:myPS2.c       **** #define DAT_PORT PORTB
  14:myPS2.c       **** #define DAT_BIT  1
  15:myPS2.c       **** 
  16:myPS2.c       **** #define CLK_DDR  DDRB
  17:myPS2.c       **** #define CLK_PIN  PINB
  18:myPS2.c       **** #define CLK_PORT PORTB
  19:myPS2.c       **** #define CLK_BIT  0
  20:myPS2.c       **** 
  21:myPS2.c       **** #define dropDAT()    do { DAT_DDR  |=  (1 << DAT_BIT); DAT_PORT &= ~(1 << DAT_BIT); } while(0)
  22:myPS2.c       **** #define dropCLK()    do { CLK_DDR  |=  (1 << CLK_BIT); CLK_PORT &= ~(1 << CLK_BIT); } while(0)
  23:myPS2.c       **** 
  24:myPS2.c       **** #define releaseDAT() do {  DAT_DDR  &= ~(1 << DAT_BIT); DAT_PORT |=  (1 << DAT_BIT); } while (0)
  25:myPS2.c       **** #define releaseCLK() do {  CLK_DDR  &= ~(1 << CLK_BIT); CLK_PORT |=  (1 << CLK_BIT); } while (0)
  26:myPS2.c       **** 
  27:myPS2.c       **** #define readDAT()  (DAT_PIN & (1 << DAT_BIT))
  28:myPS2.c       **** #define readCLK()  (CLK_PIN & (1 << CLK_BIT))
  29:myPS2.c       **** //
  30:myPS2.c       **** #define waitDATrise()  do {} while (!readDAT())
  31:myPS2.c       **** #define waitDATfall()  do {} while ( readDAT())
  32:myPS2.c       **** 
  33:myPS2.c       **** #define waitCLKrise()  do {} while (!readCLK())
  34:myPS2.c       **** #define waitCLKfall()  do {} while ( readCLK())
  35:myPS2.c       **** 
  36:myPS2.c       **** 
  37:myPS2.c       **** 
  38:myPS2.c       **** 
  39:myPS2.c       **** //
  40:myPS2.c       **** // Send a byte to the PS/2 device
  41:myPS2.c       **** 
  42:myPS2.c       **** void writePS2(uint8_t data) {
  15               		.loc 1 42 0
  16               		.cfi_startproc
  17               	.LVL0:
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  43:myPS2.c       ****   uint8_t i;
  44:myPS2.c       ****   uint8_t parity = 1;
  45:myPS2.c       **** 
  46:myPS2.c       ****   // prepare for transmit
  47:myPS2.c       ****   releaseCLK();
  22               		.loc 1 47 0
  23 0000 2098      		cbi 0x4,0
  24 0002 289A      		sbi 0x5,0
  48:myPS2.c       ****   releaseDAT();
  25               		.loc 1 48 0
  26 0004 2198      		cbi 0x4,1
  27 0006 299A      		sbi 0x5,1
  28               	.LVL1:
  29               	.LBB16:
  30               	.LBB17:
  31               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 188:/usr/lib/avr/include/util/delay.h **** 
 189:/usr/lib/avr/include/util/delay.h **** #else
 190:/usr/lib/avr/include/util/delay.h **** 	uint16_t __ticks;
 191:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:/usr/lib/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 193:/usr/lib/avr/include/util/delay.h **** 		__ticks = 1;
 194:/usr/lib/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 195:/usr/lib/avr/include/util/delay.h **** 	{
 196:/usr/lib/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:/usr/lib/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:/usr/lib/avr/include/util/delay.h **** 		while(__ticks)
 199:/usr/lib/avr/include/util/delay.h **** 		{
 200:/usr/lib/avr/include/util/delay.h **** 			// wait 1/10 ms
 201:/usr/lib/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:/usr/lib/avr/include/util/delay.h **** 			__ticks --;
 203:/usr/lib/avr/include/util/delay.h **** 		}
 204:/usr/lib/avr/include/util/delay.h **** 		return;
 205:/usr/lib/avr/include/util/delay.h **** 	}
 206:/usr/lib/avr/include/util/delay.h **** 	else
 207:/usr/lib/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 208:/usr/lib/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 209:/usr/lib/avr/include/util/delay.h **** #endif
 210:/usr/lib/avr/include/util/delay.h **** }
 211:/usr/lib/avr/include/util/delay.h **** 
 212:/usr/lib/avr/include/util/delay.h **** /**
 213:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 214:/usr/lib/avr/include/util/delay.h **** 
 215:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 216:/usr/lib/avr/include/util/delay.h **** 
 217:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 218:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 219:/usr/lib/avr/include/util/delay.h **** 
 220:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 221:/usr/lib/avr/include/util/delay.h **** 
 222:/usr/lib/avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 223:/usr/lib/avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 224:/usr/lib/avr/include/util/delay.h ****    will not be informed about this case.
 225:/usr/lib/avr/include/util/delay.h **** 
 226:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 227:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 228:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 229:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0us.
 230:/usr/lib/avr/include/util/delay.h **** 
 231:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __us into clock cycles may not always result in
 232:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 233:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __us
 234:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 235:/usr/lib/avr/include/util/delay.h **** 
 236:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 237:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 238:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 239:/usr/lib/avr/include/util/delay.h ****    respectively.
 240:/usr/lib/avr/include/util/delay.h **** 
 241:/usr/lib/avr/include/util/delay.h ****    \note
 242:/usr/lib/avr/include/util/delay.h **** 
 243:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 244:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 245:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 246:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 247:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 248:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 249:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 250:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 251:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 252:/usr/lib/avr/include/util/delay.h **** 
 253:/usr/lib/avr/include/util/delay.h ****  */
 254:/usr/lib/avr/include/util/delay.h **** void
 255:/usr/lib/avr/include/util/delay.h **** _delay_us(double __us)
 256:/usr/lib/avr/include/util/delay.h **** {
 257:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 258:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 259:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 260:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 261:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 262:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 263:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 264:/usr/lib/avr/include/util/delay.h **** 
 265:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 266:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 267:/usr/lib/avr/include/util/delay.h **** 
 268:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 269:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 270:/usr/lib/avr/include/util/delay.h **** 
 271:/usr/lib/avr/include/util/delay.h **** 	#else
 272:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 273:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 274:/usr/lib/avr/include/util/delay.h **** 	#endif
 275:/usr/lib/avr/include/util/delay.h **** 
 276:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  32               		.loc 2 276 0
  33 0008 EFE1      		ldi r30,lo8(799)
  34 000a F3E0      		ldi r31,hi8(799)
  35 000c 3197      	1:	sbiw r30,1
  36 000e 01F4      		brne 1b
  37 0010 00C0      		rjmp .
  38 0012 0000      		nop
  39               	.LVL2:
  40               	.LBE17:
  41               	.LBE16:
  49:myPS2.c       ****   _delay_us(200);
  50:myPS2.c       **** 
  51:myPS2.c       ****   // http://www.burtonsys.com/ps2_chapweske.htm
  52:myPS2.c       ****   // 1)   Bring the Clock line low for at least 100 microseconds.
  53:myPS2.c       ****   dropCLK();
  42               		.loc 1 53 0
  43 0014 209A      		sbi 0x4,0
  44 0016 2898      		cbi 0x5,0
  45               	.LVL3:
  46               	.LBB18:
  47               	.LBB19:
  48               		.loc 2 276 0
  49 0018 E7E5      		ldi r30,lo8(599)
  50 001a F2E0      		ldi r31,hi8(599)
  51 001c 3197      	1:	sbiw r30,1
  52 001e 01F4      		brne 1b
  53 0020 00C0      		rjmp .
  54 0022 0000      		nop
  55               	.LVL4:
  56               	.LBE19:
  57               	.LBE18:
  54:myPS2.c       ****   _delay_us(150);
  55:myPS2.c       **** 
  56:myPS2.c       ****   // 2)   Bring the Data line low.
  57:myPS2.c       ****   dropDAT();
  58               		.loc 1 57 0
  59 0024 219A      		sbi 0x4,1
  60 0026 2998      		cbi 0x5,1
  61               	.LVL5:
  62               	.LBB20:
  63               	.LBB21:
  64               		.loc 2 276 0
  65 0028 F5E3      		ldi r31,lo8(53)
  66 002a FA95      	1:	dec r31
  67 002c 01F4      		brne 1b
  68 002e 0000      		nop
  69               	.LVL6:
  70               	.LBE21:
  71               	.LBE20:
  58:myPS2.c       ****   _delay_us(10);
  59:myPS2.c       **** 
  60:myPS2.c       ****   // 3)   Release the Clock line.
  61:myPS2.c       ****   releaseCLK();
  72               		.loc 1 61 0
  73 0030 2098      		cbi 0x4,0
  74 0032 289A      		sbi 0x5,0
  75               	.LVL7:
  76               	.LBB22:
  77               	.LBB23:
  78               		.loc 2 276 0
  79 0034 9AE1      		ldi r25,lo8(26)
  80 0036 9A95      	1:	dec r25
  81 0038 01F4      		brne 1b
  82 003a 00C0      		rjmp .
  83               	.L2:
  84               	.LBE23:
  85               	.LBE22:
  62:myPS2.c       **** 
  63:myPS2.c       ****   _delay_us(5); // give some time for the line to raise
  64:myPS2.c       **** 
  65:myPS2.c       ****   // 4)   Wait for the device to bring the Clock line low.
  66:myPS2.c       ****   waitCLKfall();
  86               		.loc 1 66 0 discriminator 1
  87 003c 1899      		sbic 0x3,0
  88 003e 00C0      		rjmp .L2
  89 0040 28E0      		ldi r18,lo8(8)
  90 0042 91E0      		ldi r25,lo8(1)
  91               	.LVL8:
  92               	.L7:
  67:myPS2.c       **** 
  68:myPS2.c       **** 
  69:myPS2.c       **** 
  70:myPS2.c       ****   for (i = 0; i < 8; i++)
  71:myPS2.c       ****   {
  72:myPS2.c       ****     // 5)   Set/reset the Data line to send the first data bit
  73:myPS2.c       ****     if (data & 0x01)
  93               		.loc 1 73 0
  94 0044 80FF      		sbrs r24,0
  95 0046 00C0      		rjmp .L3
  74:myPS2.c       ****     {
  75:myPS2.c       ****       releaseDAT();
  96               		.loc 1 75 0
  97 0048 2198      		cbi 0x4,1
  98 004a 299A      		sbi 0x5,1
  76:myPS2.c       ****       parity++;
  99               		.loc 1 76 0
 100 004c 9F5F      		subi r25,lo8(-(1))
 101               	.LVL9:
 102 004e 00C0      		rjmp .L5
 103               	.L3:
  77:myPS2.c       ****     } else {
  78:myPS2.c       ****       dropDAT();
 104               		.loc 1 78 0
 105 0050 219A      		sbi 0x4,1
 106 0052 2998      		cbi 0x5,1
 107               	.L5:
  79:myPS2.c       ****     }
  80:myPS2.c       ****     // 6)   Wait for the device to bring Clock high.
  81:myPS2.c       ****     waitCLKrise();
 108               		.loc 1 81 0 discriminator 1
 109 0054 189B      		sbis 0x3,0
 110 0056 00C0      		rjmp .L5
 111               	.L22:
  82:myPS2.c       **** 
  83:myPS2.c       ****     // 7)   Wait for the device to bring Clock low.
  84:myPS2.c       ****     waitCLKfall();
 112               		.loc 1 84 0 discriminator 1
 113 0058 1899      		sbic 0x3,0
 114 005a 00C0      		rjmp .L22
  85:myPS2.c       **** 
  86:myPS2.c       ****     data >>= 1;
 115               		.loc 1 86 0 discriminator 2
 116 005c 8695      		lsr r24
 117               	.LVL10:
 118 005e 2150      		subi r18,lo8(-(-1))
 119               	.LVL11:
  70:myPS2.c       ****   {
 120               		.loc 1 70 0 discriminator 2
 121 0060 01F4      		brne .L7
  87:myPS2.c       **** 
  88:myPS2.c       ****     // 8)   Repeat steps 5-7 for the other seven data bits
  89:myPS2.c       ****   } // for
  90:myPS2.c       ****   //
  91:myPS2.c       ****   // and the parity bit
  92:myPS2.c       ****   if (parity & 0x01)
 122               		.loc 1 92 0
 123 0062 90FF      		sbrs r25,0
 124 0064 00C0      		rjmp .L8
  93:myPS2.c       ****   {
  94:myPS2.c       ****     releaseDAT();
 125               		.loc 1 94 0
 126 0066 2198      		cbi 0x4,1
 127 0068 299A      		sbi 0x5,1
 128 006a 00C0      		rjmp .L10
 129               	.L8:
  95:myPS2.c       ****   } else {
  96:myPS2.c       ****     dropDAT();
 130               		.loc 1 96 0
 131 006c 219A      		sbi 0x4,1
 132 006e 2998      		cbi 0x5,1
 133               	.L10:
  97:myPS2.c       ****   }
  98:myPS2.c       **** 
  99:myPS2.c       ****   waitCLKrise();
 134               		.loc 1 99 0 discriminator 1
 135 0070 189B      		sbis 0x3,0
 136 0072 00C0      		rjmp .L10
 137               	.L21:
 100:myPS2.c       ****   waitCLKfall();
 138               		.loc 1 100 0 discriminator 1
 139 0074 1899      		sbic 0x3,0
 140 0076 00C0      		rjmp .L21
 101:myPS2.c       **** 
 102:myPS2.c       ****   // 9)   Release the Data line.
 103:myPS2.c       ****   releaseDAT();
 141               		.loc 1 103 0
 142 0078 2198      		cbi 0x4,1
 143 007a 299A      		sbi 0x5,1
 144               	.LVL12:
 145               	.LBB24:
 146               	.LBB25:
 147               		.loc 2 276 0
 148 007c E5E3      		ldi r30,lo8(53)
 149 007e EA95      	1:	dec r30
 150 0080 01F4      		brne 1b
 151 0082 0000      		nop
 152               	.L12:
 153               	.LBE25:
 154               	.LBE24:
 104:myPS2.c       ****   _delay_us(10);
 105:myPS2.c       **** 
 106:myPS2.c       ****   // 10) Wait for the device to bring Data low.
 107:myPS2.c       ****   waitDATfall();
 155               		.loc 1 107 0 discriminator 1
 156 0084 1999      		sbic 0x3,1
 157 0086 00C0      		rjmp .L12
 158               	.L13:
 108:myPS2.c       **** 
 109:myPS2.c       ****   // 11) Wait for the device to bring Clock  low.
 110:myPS2.c       ****   waitCLKrise();
 159               		.loc 1 110 0 discriminator 1
 160 0088 189B      		sbis 0x3,0
 161 008a 00C0      		rjmp .L13
 162               	.L28:
 111:myPS2.c       **** 
 112:myPS2.c       ****   // 12) Wait for the device to release Data and Clock
 113:myPS2.c       ****   waitDATrise();
 163               		.loc 1 113 0 discriminator 1
 164 008c 199B      		sbis 0x3,1
 165 008e 00C0      		rjmp .L28
 166               	.L29:
 114:myPS2.c       ****   waitCLKrise();
 167               		.loc 1 114 0 discriminator 1
 168 0090 189B      		sbis 0x3,0
 169 0092 00C0      		rjmp .L29
 115:myPS2.c       **** 
 116:myPS2.c       ****   // Hold data line low to hold keyboard until next action
 117:myPS2.c       ****   dropDAT();
 170               		.loc 1 117 0
 171 0094 219A      		sbi 0x4,1
 172 0096 2998      		cbi 0x5,1
 173 0098 0895      		ret
 174               		.cfi_endproc
 175               	.LFE6:
 177               	.global	readPS2
 179               	readPS2:
 180               	.LFB7:
 118:myPS2.c       **** }
 119:myPS2.c       **** 
 120:myPS2.c       **** 
 121:myPS2.c       **** //
 122:myPS2.c       **** // Receive one byte from PS/2 device
 123:myPS2.c       **** 
 124:myPS2.c       **** uint8_t readPS2() {
 181               		.loc 1 124 0
 182               		.cfi_startproc
 183               	/* prologue: function */
 184               	/* frame size = 0 */
 185               	/* stack size = 0 */
 186               	.L__stack_usage = 0
 187               	.LVL13:
 125:myPS2.c       ****   uint8_t data;
 126:myPS2.c       ****   uint8_t i;
 127:myPS2.c       ****   uint16_t shiftRegister = 0;
 128:myPS2.c       **** 
 129:myPS2.c       ****   uint16_t mask = 0x0001;
 130:myPS2.c       **** 
 131:myPS2.c       ****   // Prepare for receive
 132:myPS2.c       ****   releaseCLK();
 188               		.loc 1 132 0
 189 009a 2098      		cbi 0x4,0
 190 009c 289A      		sbi 0x5,0
 133:myPS2.c       ****   releaseDAT();
 191               		.loc 1 133 0
 192 009e 2198      		cbi 0x4,1
 193 00a0 299A      		sbi 0x5,1
 194               	.LVL14:
 195               	.LBB26:
 196               	.LBB27:
 197               		.loc 2 276 0
 198 00a2 87EC      		ldi r24,lo8(199)
 199 00a4 90E0      		ldi r25,hi8(199)
 200 00a6 0197      	1:	sbiw r24,1
 201 00a8 01F4      		brne 1b
 202 00aa 00C0      		rjmp .
 203 00ac 0000      		nop
 204               	.LVL15:
 205 00ae 2BE0      		ldi r18,lo8(11)
 206               	.LBE27:
 207               	.LBE26:
 129:myPS2.c       **** 
 208               		.loc 1 129 0
 209 00b0 41E0      		ldi r20,lo8(1)
 210 00b2 50E0      		ldi r21,0
 127:myPS2.c       **** 
 211               		.loc 1 127 0
 212 00b4 80E0      		ldi r24,0
 213 00b6 90E0      		ldi r25,0
 214               	.LVL16:
 215               	.L37:
 134:myPS2.c       ****   _delay_us(50);
 135:myPS2.c       **** 
 136:myPS2.c       ****   // receive 11 bits
 137:myPS2.c       ****   for (i = 0; i < 11; i++)   {
 138:myPS2.c       ****     waitCLKfall();
 216               		.loc 1 138 0 discriminator 1
 217 00b8 1899      		sbic 0x3,0
 218 00ba 00C0      		rjmp .L37
 219               	.LVL17:
 220               	.LBB28:
 221               	.LBB29:
 222               		.loc 2 276 0
 223 00bc 3AE1      		ldi r19,lo8(26)
 224 00be 3A95      	1:	dec r19
 225 00c0 01F4      		brne 1b
 226 00c2 00C0      		rjmp .
 227               	.LVL18:
 228               	.LBE29:
 229               	.LBE28:
 139:myPS2.c       ****     _delay_us(5);
 140:myPS2.c       **** 
 141:myPS2.c       ****     if ( readDAT() )
 230               		.loc 1 141 0
 231 00c4 199B      		sbis 0x3,1
 232 00c6 00C0      		rjmp .L39
 142:myPS2.c       ****       shiftRegister |= mask;
 233               		.loc 1 142 0
 234 00c8 842B      		or r24,r20
 235 00ca 952B      		or r25,r21
 236               	.LVL19:
 237               	.L39:
 143:myPS2.c       **** 
 144:myPS2.c       ****     waitCLKrise();
 238               		.loc 1 144 0 discriminator 1
 239 00cc 189B      		sbis 0x3,0
 240 00ce 00C0      		rjmp .L39
 145:myPS2.c       ****     mask <<= 1;     // point next bit
 241               		.loc 1 145 0 discriminator 2
 242 00d0 440F      		lsl r20
 243 00d2 551F      		rol r21
 244               	.LVL20:
 245 00d4 2150      		subi r18,lo8(-(-1))
 246               	.LVL21:
 137:myPS2.c       ****     waitCLKfall();
 247               		.loc 1 137 0 discriminator 2
 248 00d6 01F4      		brne .L37
 146:myPS2.c       ****   }
 147:myPS2.c       **** 
 148:myPS2.c       ****   // hold clock line to inhibt further data
 149:myPS2.c       ****   dropCLK();
 249               		.loc 1 149 0
 250 00d8 209A      		sbi 0x4,0
 251 00da 2898      		cbi 0x5,0
 252               	.LVL22:
 150:myPS2.c       **** 
 151:myPS2.c       ****   // todo test for parity, framing, etc
 152:myPS2.c       ****   data = (uint8_t) (shiftRegister >> 1);
 153:myPS2.c       **** 
 154:myPS2.c       ****   return data;
 253               		.loc 1 154 0
 254 00dc 9695      		lsr r25
 255 00de 8795      		ror r24
 256               	.LVL23:
 155:myPS2.c       **** }
 257               		.loc 1 155 0
 258 00e0 0895      		ret
 259               		.cfi_endproc
 260               	.LFE7:
 262               	.Letext0:
 263               		.file 3 "/usr/lib/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 myPS2.c
     /tmp/ccOx2DSr.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccOx2DSr.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccOx2DSr.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccOx2DSr.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccOx2DSr.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccOx2DSr.s:12     .text:0000000000000000 writePS2
     /tmp/ccOx2DSr.s:179    .text:000000000000009a readPS2

NO UNDEFINED SYMBOLS
